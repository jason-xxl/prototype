/*
 * Reference Data MS
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.4.6
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.ExtraInfo;
import io.swagger.client.model.InlineResponse2001;
import io.swagger.client.model.InlineResponse2002;
import io.swagger.client.model.RefEntry;
import io.swagger.client.model.RefGroup;
import io.swagger.client.model.TranslationEntry;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AdminApi
 */
@Ignore
public class AdminApiTest {

    private final AdminApi api = new AdminApi();

    /**
     * Retrieve only one RefGroup by its code with configuration details
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void adminRefGroupRefGroupCodeGetTest() throws ApiException {
        String refGroupCode = null;
        RefGroup response = api.adminRefGroupRefGroupCodeGet(refGroupCode);

        // TODO: test validations
    }

    /**
     * Retrieve all the RefEntries of a RefGroup
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void adminRefGroupRefGroupCodeRefEntriesGetTest() throws ApiException {
        String refGroupCode = null;
        String filter = null;
        Integer page = null;
        Integer pageSize = null;
        InlineResponse2001 response = api.adminRefGroupRefGroupCodeRefEntriesGet(refGroupCode, filter, page, pageSize);

        // TODO: test validations
    }

    /**
     * Retrieve only one RefEntry with all its detail
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void adminRefGroupRefGroupCodeRefEntryRefEntryCodeGetTest() throws ApiException {
        String refGroupCode = null;
        String refEntryCode = null;
        RefEntry response = api.adminRefGroupRefGroupCodeRefEntryRefEntryCodeGet(refGroupCode, refEntryCode);

        // TODO: test validations
    }

    /**
     * Create
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void adminRefGroupRefGroupCodeRefEntryRefEntryCodeSetPostTest() throws ApiException {
        RefEntry body = null;
        String refGroupCode = null;
        String refEntryCode = null;
        ExtraInfo response = api.adminRefGroupRefGroupCodeRefEntryRefEntryCodeSetPost(body, refGroupCode, refEntryCode);

        // TODO: test validations
    }

    /**
     * Remove an RefEntry identified by its &#x60;code&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void adminRefGroupRefGroupCodeRefEntryRefEntryCodeUnsetPostTest() throws ApiException {
        String refGroupCode = null;
        String refEntryCode = null;
        ExtraInfo response = api.adminRefGroupRefGroupCodeRefEntryRefEntryCodeUnsetPost(refGroupCode, refEntryCode);

        // TODO: test validations
    }

    /**
     * Change the configuration detail of a RefGroup, or create a RefGroup if the &#x60;code&#x60; doesn&#x27;t exists.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void adminRefGroupRefGroupCodeSetPostTest() throws ApiException {
        RefGroup body = null;
        String refGroupCode = null;
        ExtraInfo response = api.adminRefGroupRefGroupCodeSetPost(body, refGroupCode);

        // TODO: test validations
    }

    /**
     * Remove a RefGroup permenantly.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void adminRefGroupRefGroupCodeUnsetPostTest() throws ApiException {
        String refGroupCode = null;
        ExtraInfo response = api.adminRefGroupRefGroupCodeUnsetPost(refGroupCode);

        // TODO: test validations
    }

    /**
     * Retrieve all the existing groups.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void adminRefGroupsGetTest() throws ApiException {
        List<RefGroup> response = api.adminRefGroupsGet();

        // TODO: test validations
    }

    /**
     * Server heartbeat operation
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void adminTranslationTranslationKeyGetTest() throws ApiException {
        String translationKey = null;
        List<TranslationEntry> response = api.adminTranslationTranslationKeyGet(translationKey);

        // TODO: test validations
    }

    /**
     * Server heartbeat operation
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void adminTranslationTranslationKeyLocaleSetPostTest() throws ApiException {
        TranslationEntry body = null;
        String translationKey = null;
        String locale = null;
        ExtraInfo response = api.adminTranslationTranslationKeyLocaleSetPost(body, translationKey, locale);

        // TODO: test validations
    }

    /**
     * Server heartbeat operation
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void adminTranslationTranslationKeyLocaleUnsetPostTest() throws ApiException {
        String translationKey = null;
        String locale = null;
        ExtraInfo response = api.adminTranslationTranslationKeyLocaleUnsetPost(translationKey, locale);

        // TODO: test validations
    }

    /**
     * Retrieve all existing translation keys
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void adminTranslationsGetTest() throws ApiException {
        Integer page = null;
        Integer pageSize = null;
        InlineResponse2002 response = api.adminTranslationsGet(page, pageSize);

        // TODO: test validations
    }
}
