/*
 * This file is generated by jOOQ.
 */
package org.jooq.dsl.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.JSONB;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.dsl.Indexes;
import org.jooq.dsl.Keys;
import org.jooq.dsl.Mvp;
import org.jooq.dsl.tables.records.EntryRecord;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class Entry extends TableImpl<EntryRecord> {

    private static final long serialVersionUID = 216718856;

    /**
     * The reference instance of <code>mvp.entry</code>
     */
    public static final Entry ENTRY = new Entry();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EntryRecord> getRecordType() {
        return EntryRecord.class;
    }

    /**
     * The column <code>mvp.entry.id</code>.
     */
    public final TableField<EntryRecord, Integer> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('mvp.entry_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>mvp.entry.group_code</code>.
     */
    public final TableField<EntryRecord, String> GROUP_CODE = createField(DSL.name("group_code"), org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>mvp.entry.code</code>.
     */
    public final TableField<EntryRecord, String> CODE = createField(DSL.name("code"), org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>mvp.entry.desc</code>.
     */
    public final TableField<EntryRecord, String> DESC = createField(DSL.name("desc"), org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>mvp.entry.seq_id</code>.
     */
    public final TableField<EntryRecord, Integer> SEQ_ID = createField(DSL.name("seq_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>mvp.entry.custom_fields</code>.
     */
    public final TableField<EntryRecord, JSONB> CUSTOM_FIELDS = createField(DSL.name("custom_fields"), org.jooq.impl.SQLDataType.JSONB.nullable(false).defaultValue(org.jooq.impl.DSL.field("'{}'::jsonb", org.jooq.impl.SQLDataType.JSONB)), this, "");

    /**
     * The column <code>mvp.entry.created_at</code>.
     */
    public final TableField<EntryRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "");

    /**
     * The column <code>mvp.entry.updated_at</code>.
     */
    public final TableField<EntryRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("updated_at"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "");

    /**
     * Create a <code>mvp.entry</code> table reference
     */
    public Entry() {
        this(DSL.name("entry"), null);
    }

    /**
     * Create an aliased <code>mvp.entry</code> table reference
     */
    public Entry(String alias) {
        this(DSL.name(alias), ENTRY);
    }

    /**
     * Create an aliased <code>mvp.entry</code> table reference
     */
    public Entry(Name alias) {
        this(alias, ENTRY);
    }

    private Entry(Name alias, Table<EntryRecord> aliased) {
        this(alias, aliased, null);
    }

    private Entry(Name alias, Table<EntryRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Entry(Table<O> child, ForeignKey<O, EntryRecord> key) {
        super(child, key, ENTRY);
    }

    @Override
    public Schema getSchema() {
        return Mvp.MVP;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.ENTRY_GROUP_CODE_CODE_IDX);
    }

    @Override
    public Identity<EntryRecord, Integer> getIdentity() {
        return Keys.IDENTITY_ENTRY;
    }

    @Override
    public UniqueKey<EntryRecord> getPrimaryKey() {
        return Keys.ENTRY_PKEY;
    }

    @Override
    public List<UniqueKey<EntryRecord>> getKeys() {
        return Arrays.<UniqueKey<EntryRecord>>asList(Keys.ENTRY_PKEY);
    }

    @Override
    public Entry as(String alias) {
        return new Entry(DSL.name(alias), this);
    }

    @Override
    public Entry as(Name alias) {
        return new Entry(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Entry rename(String name) {
        return new Entry(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Entry rename(Name name) {
        return new Entry(name, null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<Integer, String, String, String, Integer, JSONB, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row8) super.fieldsRow();
    }
}
