/*
 * Reference Data MS
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.4.6
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.ExtraInfo;
import io.swagger.client.model.InlineResponse2001;
import io.swagger.client.model.InlineResponse2002;
import io.swagger.client.model.RefEntryEditView;
import io.swagger.client.model.RefEntryEditViewSave;
import io.swagger.client.model.RefGroup;
import io.swagger.client.model.TranslationEntry;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AdminApi {
    private ApiClient apiClient;

    public AdminApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AdminApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for adminRefGroupRefGroupCodeGet
     * @param refGroupCode  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call adminRefGroupRefGroupCodeGetCall(String refGroupCode, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/admin/ref-group/{ref_group_code}"
            .replaceAll("\\{" + "ref_group_code" + "\\}", apiClient.escapeString(refGroupCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call adminRefGroupRefGroupCodeGetValidateBeforeCall(String refGroupCode, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'refGroupCode' is set
        if (refGroupCode == null) {
            throw new ApiException("Missing the required parameter 'refGroupCode' when calling adminRefGroupRefGroupCodeGet(Async)");
        }
        
        com.squareup.okhttp.Call call = adminRefGroupRefGroupCodeGetCall(refGroupCode, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Retrieve only one RefGroup by its code with configuration details
     * 
     * @param refGroupCode  (required)
     * @return RefGroup
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RefGroup adminRefGroupRefGroupCodeGet(String refGroupCode) throws ApiException {
        ApiResponse<RefGroup> resp = adminRefGroupRefGroupCodeGetWithHttpInfo(refGroupCode);
        return resp.getData();
    }

    /**
     * Retrieve only one RefGroup by its code with configuration details
     * 
     * @param refGroupCode  (required)
     * @return ApiResponse&lt;RefGroup&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RefGroup> adminRefGroupRefGroupCodeGetWithHttpInfo(String refGroupCode) throws ApiException {
        com.squareup.okhttp.Call call = adminRefGroupRefGroupCodeGetValidateBeforeCall(refGroupCode, null, null);
        Type localVarReturnType = new TypeToken<RefGroup>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve only one RefGroup by its code with configuration details (asynchronously)
     * 
     * @param refGroupCode  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call adminRefGroupRefGroupCodeGetAsync(String refGroupCode, final ApiCallback<RefGroup> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = adminRefGroupRefGroupCodeGetValidateBeforeCall(refGroupCode, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RefGroup>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for adminRefGroupRefGroupCodeRefEntriesGet
     * @param refGroupCode  (required)
     * @param filter  (optional)
     * @param page  (optional)
     * @param pageSize  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call adminRefGroupRefGroupCodeRefEntriesGetCall(String refGroupCode, String filter, Integer page, Integer pageSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/admin/ref-group/{ref_group_code}/ref-entries/"
            .replaceAll("\\{" + "ref_group_code" + "\\}", apiClient.escapeString(refGroupCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page_size", pageSize));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call adminRefGroupRefGroupCodeRefEntriesGetValidateBeforeCall(String refGroupCode, String filter, Integer page, Integer pageSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'refGroupCode' is set
        if (refGroupCode == null) {
            throw new ApiException("Missing the required parameter 'refGroupCode' when calling adminRefGroupRefGroupCodeRefEntriesGet(Async)");
        }
        
        com.squareup.okhttp.Call call = adminRefGroupRefGroupCodeRefEntriesGetCall(refGroupCode, filter, page, pageSize, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Retrieve all the RefEntries of a RefGroup
     * 
     * @param refGroupCode  (required)
     * @param filter  (optional)
     * @param page  (optional)
     * @param pageSize  (optional)
     * @return InlineResponse2001
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse2001 adminRefGroupRefGroupCodeRefEntriesGet(String refGroupCode, String filter, Integer page, Integer pageSize) throws ApiException {
        ApiResponse<InlineResponse2001> resp = adminRefGroupRefGroupCodeRefEntriesGetWithHttpInfo(refGroupCode, filter, page, pageSize);
        return resp.getData();
    }

    /**
     * Retrieve all the RefEntries of a RefGroup
     * 
     * @param refGroupCode  (required)
     * @param filter  (optional)
     * @param page  (optional)
     * @param pageSize  (optional)
     * @return ApiResponse&lt;InlineResponse2001&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse2001> adminRefGroupRefGroupCodeRefEntriesGetWithHttpInfo(String refGroupCode, String filter, Integer page, Integer pageSize) throws ApiException {
        com.squareup.okhttp.Call call = adminRefGroupRefGroupCodeRefEntriesGetValidateBeforeCall(refGroupCode, filter, page, pageSize, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse2001>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve all the RefEntries of a RefGroup (asynchronously)
     * 
     * @param refGroupCode  (required)
     * @param filter  (optional)
     * @param page  (optional)
     * @param pageSize  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call adminRefGroupRefGroupCodeRefEntriesGetAsync(String refGroupCode, String filter, Integer page, Integer pageSize, final ApiCallback<InlineResponse2001> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = adminRefGroupRefGroupCodeRefEntriesGetValidateBeforeCall(refGroupCode, filter, page, pageSize, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse2001>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for adminRefGroupRefGroupCodeRefEntryRefEntryCodeGet
     * @param refGroupCode  (required)
     * @param refEntryCode  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call adminRefGroupRefGroupCodeRefEntryRefEntryCodeGetCall(String refGroupCode, String refEntryCode, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/admin/ref-group/{ref_group_code}/ref-entry/{ref_entry_code}"
            .replaceAll("\\{" + "ref_group_code" + "\\}", apiClient.escapeString(refGroupCode.toString()))
            .replaceAll("\\{" + "ref_entry_code" + "\\}", apiClient.escapeString(refEntryCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call adminRefGroupRefGroupCodeRefEntryRefEntryCodeGetValidateBeforeCall(String refGroupCode, String refEntryCode, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'refGroupCode' is set
        if (refGroupCode == null) {
            throw new ApiException("Missing the required parameter 'refGroupCode' when calling adminRefGroupRefGroupCodeRefEntryRefEntryCodeGet(Async)");
        }
        // verify the required parameter 'refEntryCode' is set
        if (refEntryCode == null) {
            throw new ApiException("Missing the required parameter 'refEntryCode' when calling adminRefGroupRefGroupCodeRefEntryRefEntryCodeGet(Async)");
        }
        
        com.squareup.okhttp.Call call = adminRefGroupRefGroupCodeRefEntryRefEntryCodeGetCall(refGroupCode, refEntryCode, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Retrieve only one RefEntry with all its detail
     * 
     * @param refGroupCode  (required)
     * @param refEntryCode  (required)
     * @return RefEntryEditView
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RefEntryEditView adminRefGroupRefGroupCodeRefEntryRefEntryCodeGet(String refGroupCode, String refEntryCode) throws ApiException {
        ApiResponse<RefEntryEditView> resp = adminRefGroupRefGroupCodeRefEntryRefEntryCodeGetWithHttpInfo(refGroupCode, refEntryCode);
        return resp.getData();
    }

    /**
     * Retrieve only one RefEntry with all its detail
     * 
     * @param refGroupCode  (required)
     * @param refEntryCode  (required)
     * @return ApiResponse&lt;RefEntryEditView&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RefEntryEditView> adminRefGroupRefGroupCodeRefEntryRefEntryCodeGetWithHttpInfo(String refGroupCode, String refEntryCode) throws ApiException {
        com.squareup.okhttp.Call call = adminRefGroupRefGroupCodeRefEntryRefEntryCodeGetValidateBeforeCall(refGroupCode, refEntryCode, null, null);
        Type localVarReturnType = new TypeToken<RefEntryEditView>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve only one RefEntry with all its detail (asynchronously)
     * 
     * @param refGroupCode  (required)
     * @param refEntryCode  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call adminRefGroupRefGroupCodeRefEntryRefEntryCodeGetAsync(String refGroupCode, String refEntryCode, final ApiCallback<RefEntryEditView> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = adminRefGroupRefGroupCodeRefEntryRefEntryCodeGetValidateBeforeCall(refGroupCode, refEntryCode, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RefEntryEditView>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for adminRefGroupRefGroupCodeRefEntryRefEntryCodeSetPost
     * @param body  (required)
     * @param refGroupCode  (required)
     * @param refEntryCode  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call adminRefGroupRefGroupCodeRefEntryRefEntryCodeSetPostCall(RefEntryEditViewSave body, String refGroupCode, String refEntryCode, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/admin/ref-group/{ref_group_code}/ref-entry/{ref_entry_code}/set"
            .replaceAll("\\{" + "ref_group_code" + "\\}", apiClient.escapeString(refGroupCode.toString()))
            .replaceAll("\\{" + "ref_entry_code" + "\\}", apiClient.escapeString(refEntryCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call adminRefGroupRefGroupCodeRefEntryRefEntryCodeSetPostValidateBeforeCall(RefEntryEditViewSave body, String refGroupCode, String refEntryCode, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling adminRefGroupRefGroupCodeRefEntryRefEntryCodeSetPost(Async)");
        }
        // verify the required parameter 'refGroupCode' is set
        if (refGroupCode == null) {
            throw new ApiException("Missing the required parameter 'refGroupCode' when calling adminRefGroupRefGroupCodeRefEntryRefEntryCodeSetPost(Async)");
        }
        // verify the required parameter 'refEntryCode' is set
        if (refEntryCode == null) {
            throw new ApiException("Missing the required parameter 'refEntryCode' when calling adminRefGroupRefGroupCodeRefEntryRefEntryCodeSetPost(Async)");
        }
        
        com.squareup.okhttp.Call call = adminRefGroupRefGroupCodeRefEntryRefEntryCodeSetPostCall(body, refGroupCode, refEntryCode, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create
     * 
     * @param body  (required)
     * @param refGroupCode  (required)
     * @param refEntryCode  (required)
     * @return ExtraInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ExtraInfo adminRefGroupRefGroupCodeRefEntryRefEntryCodeSetPost(RefEntryEditViewSave body, String refGroupCode, String refEntryCode) throws ApiException {
        ApiResponse<ExtraInfo> resp = adminRefGroupRefGroupCodeRefEntryRefEntryCodeSetPostWithHttpInfo(body, refGroupCode, refEntryCode);
        return resp.getData();
    }

    /**
     * Create
     * 
     * @param body  (required)
     * @param refGroupCode  (required)
     * @param refEntryCode  (required)
     * @return ApiResponse&lt;ExtraInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ExtraInfo> adminRefGroupRefGroupCodeRefEntryRefEntryCodeSetPostWithHttpInfo(RefEntryEditViewSave body, String refGroupCode, String refEntryCode) throws ApiException {
        com.squareup.okhttp.Call call = adminRefGroupRefGroupCodeRefEntryRefEntryCodeSetPostValidateBeforeCall(body, refGroupCode, refEntryCode, null, null);
        Type localVarReturnType = new TypeToken<ExtraInfo>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create (asynchronously)
     * 
     * @param body  (required)
     * @param refGroupCode  (required)
     * @param refEntryCode  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call adminRefGroupRefGroupCodeRefEntryRefEntryCodeSetPostAsync(RefEntryEditViewSave body, String refGroupCode, String refEntryCode, final ApiCallback<ExtraInfo> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = adminRefGroupRefGroupCodeRefEntryRefEntryCodeSetPostValidateBeforeCall(body, refGroupCode, refEntryCode, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ExtraInfo>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for adminRefGroupRefGroupCodeRefEntryRefEntryCodeUnsetPost
     * @param refGroupCode  (required)
     * @param refEntryCode  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call adminRefGroupRefGroupCodeRefEntryRefEntryCodeUnsetPostCall(String refGroupCode, String refEntryCode, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/admin/ref-group/{ref_group_code}/ref-entry/{ref_entry_code}/unset"
            .replaceAll("\\{" + "ref_group_code" + "\\}", apiClient.escapeString(refGroupCode.toString()))
            .replaceAll("\\{" + "ref_entry_code" + "\\}", apiClient.escapeString(refEntryCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call adminRefGroupRefGroupCodeRefEntryRefEntryCodeUnsetPostValidateBeforeCall(String refGroupCode, String refEntryCode, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'refGroupCode' is set
        if (refGroupCode == null) {
            throw new ApiException("Missing the required parameter 'refGroupCode' when calling adminRefGroupRefGroupCodeRefEntryRefEntryCodeUnsetPost(Async)");
        }
        // verify the required parameter 'refEntryCode' is set
        if (refEntryCode == null) {
            throw new ApiException("Missing the required parameter 'refEntryCode' when calling adminRefGroupRefGroupCodeRefEntryRefEntryCodeUnsetPost(Async)");
        }
        
        com.squareup.okhttp.Call call = adminRefGroupRefGroupCodeRefEntryRefEntryCodeUnsetPostCall(refGroupCode, refEntryCode, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Remove an RefEntry identified by its &#x60;code&#x60;
     * 
     * @param refGroupCode  (required)
     * @param refEntryCode  (required)
     * @return ExtraInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ExtraInfo adminRefGroupRefGroupCodeRefEntryRefEntryCodeUnsetPost(String refGroupCode, String refEntryCode) throws ApiException {
        ApiResponse<ExtraInfo> resp = adminRefGroupRefGroupCodeRefEntryRefEntryCodeUnsetPostWithHttpInfo(refGroupCode, refEntryCode);
        return resp.getData();
    }

    /**
     * Remove an RefEntry identified by its &#x60;code&#x60;
     * 
     * @param refGroupCode  (required)
     * @param refEntryCode  (required)
     * @return ApiResponse&lt;ExtraInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ExtraInfo> adminRefGroupRefGroupCodeRefEntryRefEntryCodeUnsetPostWithHttpInfo(String refGroupCode, String refEntryCode) throws ApiException {
        com.squareup.okhttp.Call call = adminRefGroupRefGroupCodeRefEntryRefEntryCodeUnsetPostValidateBeforeCall(refGroupCode, refEntryCode, null, null);
        Type localVarReturnType = new TypeToken<ExtraInfo>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Remove an RefEntry identified by its &#x60;code&#x60; (asynchronously)
     * 
     * @param refGroupCode  (required)
     * @param refEntryCode  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call adminRefGroupRefGroupCodeRefEntryRefEntryCodeUnsetPostAsync(String refGroupCode, String refEntryCode, final ApiCallback<ExtraInfo> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = adminRefGroupRefGroupCodeRefEntryRefEntryCodeUnsetPostValidateBeforeCall(refGroupCode, refEntryCode, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ExtraInfo>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for adminRefGroupRefGroupCodeSetPost
     * @param body  (required)
     * @param refGroupCode  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call adminRefGroupRefGroupCodeSetPostCall(RefGroup body, String refGroupCode, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/admin/ref-group/{ref_group_code}/set"
            .replaceAll("\\{" + "ref_group_code" + "\\}", apiClient.escapeString(refGroupCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call adminRefGroupRefGroupCodeSetPostValidateBeforeCall(RefGroup body, String refGroupCode, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling adminRefGroupRefGroupCodeSetPost(Async)");
        }
        // verify the required parameter 'refGroupCode' is set
        if (refGroupCode == null) {
            throw new ApiException("Missing the required parameter 'refGroupCode' when calling adminRefGroupRefGroupCodeSetPost(Async)");
        }
        
        com.squareup.okhttp.Call call = adminRefGroupRefGroupCodeSetPostCall(body, refGroupCode, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Change the configuration detail of a RefGroup, or create a RefGroup if the &#x60;code&#x60; doesn&#x27;t exists.
     * 
     * @param body  (required)
     * @param refGroupCode  (required)
     * @return ExtraInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ExtraInfo adminRefGroupRefGroupCodeSetPost(RefGroup body, String refGroupCode) throws ApiException {
        ApiResponse<ExtraInfo> resp = adminRefGroupRefGroupCodeSetPostWithHttpInfo(body, refGroupCode);
        return resp.getData();
    }

    /**
     * Change the configuration detail of a RefGroup, or create a RefGroup if the &#x60;code&#x60; doesn&#x27;t exists.
     * 
     * @param body  (required)
     * @param refGroupCode  (required)
     * @return ApiResponse&lt;ExtraInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ExtraInfo> adminRefGroupRefGroupCodeSetPostWithHttpInfo(RefGroup body, String refGroupCode) throws ApiException {
        com.squareup.okhttp.Call call = adminRefGroupRefGroupCodeSetPostValidateBeforeCall(body, refGroupCode, null, null);
        Type localVarReturnType = new TypeToken<ExtraInfo>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Change the configuration detail of a RefGroup, or create a RefGroup if the &#x60;code&#x60; doesn&#x27;t exists. (asynchronously)
     * 
     * @param body  (required)
     * @param refGroupCode  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call adminRefGroupRefGroupCodeSetPostAsync(RefGroup body, String refGroupCode, final ApiCallback<ExtraInfo> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = adminRefGroupRefGroupCodeSetPostValidateBeforeCall(body, refGroupCode, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ExtraInfo>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for adminRefGroupRefGroupCodeUnsetPost
     * @param refGroupCode  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call adminRefGroupRefGroupCodeUnsetPostCall(String refGroupCode, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/admin/ref-group/{ref_group_code}/unset"
            .replaceAll("\\{" + "ref_group_code" + "\\}", apiClient.escapeString(refGroupCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call adminRefGroupRefGroupCodeUnsetPostValidateBeforeCall(String refGroupCode, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'refGroupCode' is set
        if (refGroupCode == null) {
            throw new ApiException("Missing the required parameter 'refGroupCode' when calling adminRefGroupRefGroupCodeUnsetPost(Async)");
        }
        
        com.squareup.okhttp.Call call = adminRefGroupRefGroupCodeUnsetPostCall(refGroupCode, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Remove a RefGroup permenantly.
     * 
     * @param refGroupCode  (required)
     * @return ExtraInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ExtraInfo adminRefGroupRefGroupCodeUnsetPost(String refGroupCode) throws ApiException {
        ApiResponse<ExtraInfo> resp = adminRefGroupRefGroupCodeUnsetPostWithHttpInfo(refGroupCode);
        return resp.getData();
    }

    /**
     * Remove a RefGroup permenantly.
     * 
     * @param refGroupCode  (required)
     * @return ApiResponse&lt;ExtraInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ExtraInfo> adminRefGroupRefGroupCodeUnsetPostWithHttpInfo(String refGroupCode) throws ApiException {
        com.squareup.okhttp.Call call = adminRefGroupRefGroupCodeUnsetPostValidateBeforeCall(refGroupCode, null, null);
        Type localVarReturnType = new TypeToken<ExtraInfo>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Remove a RefGroup permenantly. (asynchronously)
     * 
     * @param refGroupCode  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call adminRefGroupRefGroupCodeUnsetPostAsync(String refGroupCode, final ApiCallback<ExtraInfo> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = adminRefGroupRefGroupCodeUnsetPostValidateBeforeCall(refGroupCode, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ExtraInfo>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for adminRefGroupsGet
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call adminRefGroupsGetCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/admin/ref-groups";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call adminRefGroupsGetValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = adminRefGroupsGetCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Retrieve all the existing groups.
     * 
     * @return List&lt;RefGroup&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<RefGroup> adminRefGroupsGet() throws ApiException {
        ApiResponse<List<RefGroup>> resp = adminRefGroupsGetWithHttpInfo();
        return resp.getData();
    }

    /**
     * Retrieve all the existing groups.
     * 
     * @return ApiResponse&lt;List&lt;RefGroup&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<RefGroup>> adminRefGroupsGetWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = adminRefGroupsGetValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<List<RefGroup>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve all the existing groups. (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call adminRefGroupsGetAsync(final ApiCallback<List<RefGroup>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = adminRefGroupsGetValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<RefGroup>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for adminTranslationTranslationKeyGet
     * @param translationKey  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call adminTranslationTranslationKeyGetCall(String translationKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/admin/translation/{translation_key}/"
            .replaceAll("\\{" + "translation_key" + "\\}", apiClient.escapeString(translationKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call adminTranslationTranslationKeyGetValidateBeforeCall(String translationKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'translationKey' is set
        if (translationKey == null) {
            throw new ApiException("Missing the required parameter 'translationKey' when calling adminTranslationTranslationKeyGet(Async)");
        }
        
        com.squareup.okhttp.Call call = adminTranslationTranslationKeyGetCall(translationKey, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Server heartbeat operation
     * 
     * @param translationKey  (required)
     * @return List&lt;TranslationEntry&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<TranslationEntry> adminTranslationTranslationKeyGet(String translationKey) throws ApiException {
        ApiResponse<List<TranslationEntry>> resp = adminTranslationTranslationKeyGetWithHttpInfo(translationKey);
        return resp.getData();
    }

    /**
     * Server heartbeat operation
     * 
     * @param translationKey  (required)
     * @return ApiResponse&lt;List&lt;TranslationEntry&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<TranslationEntry>> adminTranslationTranslationKeyGetWithHttpInfo(String translationKey) throws ApiException {
        com.squareup.okhttp.Call call = adminTranslationTranslationKeyGetValidateBeforeCall(translationKey, null, null);
        Type localVarReturnType = new TypeToken<List<TranslationEntry>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Server heartbeat operation (asynchronously)
     * 
     * @param translationKey  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call adminTranslationTranslationKeyGetAsync(String translationKey, final ApiCallback<List<TranslationEntry>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = adminTranslationTranslationKeyGetValidateBeforeCall(translationKey, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<TranslationEntry>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for adminTranslationTranslationKeyLocaleSetPost
     * @param body  (required)
     * @param translationKey  (required)
     * @param locale  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call adminTranslationTranslationKeyLocaleSetPostCall(TranslationEntry body, String translationKey, String locale, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/admin/translation/{translation_key}/{locale}/set"
            .replaceAll("\\{" + "translation_key" + "\\}", apiClient.escapeString(translationKey.toString()))
            .replaceAll("\\{" + "locale" + "\\}", apiClient.escapeString(locale.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call adminTranslationTranslationKeyLocaleSetPostValidateBeforeCall(TranslationEntry body, String translationKey, String locale, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling adminTranslationTranslationKeyLocaleSetPost(Async)");
        }
        // verify the required parameter 'translationKey' is set
        if (translationKey == null) {
            throw new ApiException("Missing the required parameter 'translationKey' when calling adminTranslationTranslationKeyLocaleSetPost(Async)");
        }
        // verify the required parameter 'locale' is set
        if (locale == null) {
            throw new ApiException("Missing the required parameter 'locale' when calling adminTranslationTranslationKeyLocaleSetPost(Async)");
        }
        
        com.squareup.okhttp.Call call = adminTranslationTranslationKeyLocaleSetPostCall(body, translationKey, locale, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Server heartbeat operation
     * 
     * @param body  (required)
     * @param translationKey  (required)
     * @param locale  (required)
     * @return ExtraInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ExtraInfo adminTranslationTranslationKeyLocaleSetPost(TranslationEntry body, String translationKey, String locale) throws ApiException {
        ApiResponse<ExtraInfo> resp = adminTranslationTranslationKeyLocaleSetPostWithHttpInfo(body, translationKey, locale);
        return resp.getData();
    }

    /**
     * Server heartbeat operation
     * 
     * @param body  (required)
     * @param translationKey  (required)
     * @param locale  (required)
     * @return ApiResponse&lt;ExtraInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ExtraInfo> adminTranslationTranslationKeyLocaleSetPostWithHttpInfo(TranslationEntry body, String translationKey, String locale) throws ApiException {
        com.squareup.okhttp.Call call = adminTranslationTranslationKeyLocaleSetPostValidateBeforeCall(body, translationKey, locale, null, null);
        Type localVarReturnType = new TypeToken<ExtraInfo>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Server heartbeat operation (asynchronously)
     * 
     * @param body  (required)
     * @param translationKey  (required)
     * @param locale  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call adminTranslationTranslationKeyLocaleSetPostAsync(TranslationEntry body, String translationKey, String locale, final ApiCallback<ExtraInfo> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = adminTranslationTranslationKeyLocaleSetPostValidateBeforeCall(body, translationKey, locale, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ExtraInfo>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for adminTranslationTranslationKeyLocaleUnsetPost
     * @param translationKey  (required)
     * @param locale  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call adminTranslationTranslationKeyLocaleUnsetPostCall(String translationKey, String locale, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/admin/translation/{translation_key}/{locale}/unset"
            .replaceAll("\\{" + "translation_key" + "\\}", apiClient.escapeString(translationKey.toString()))
            .replaceAll("\\{" + "locale" + "\\}", apiClient.escapeString(locale.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call adminTranslationTranslationKeyLocaleUnsetPostValidateBeforeCall(String translationKey, String locale, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'translationKey' is set
        if (translationKey == null) {
            throw new ApiException("Missing the required parameter 'translationKey' when calling adminTranslationTranslationKeyLocaleUnsetPost(Async)");
        }
        // verify the required parameter 'locale' is set
        if (locale == null) {
            throw new ApiException("Missing the required parameter 'locale' when calling adminTranslationTranslationKeyLocaleUnsetPost(Async)");
        }
        
        com.squareup.okhttp.Call call = adminTranslationTranslationKeyLocaleUnsetPostCall(translationKey, locale, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Server heartbeat operation
     * 
     * @param translationKey  (required)
     * @param locale  (required)
     * @return ExtraInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ExtraInfo adminTranslationTranslationKeyLocaleUnsetPost(String translationKey, String locale) throws ApiException {
        ApiResponse<ExtraInfo> resp = adminTranslationTranslationKeyLocaleUnsetPostWithHttpInfo(translationKey, locale);
        return resp.getData();
    }

    /**
     * Server heartbeat operation
     * 
     * @param translationKey  (required)
     * @param locale  (required)
     * @return ApiResponse&lt;ExtraInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ExtraInfo> adminTranslationTranslationKeyLocaleUnsetPostWithHttpInfo(String translationKey, String locale) throws ApiException {
        com.squareup.okhttp.Call call = adminTranslationTranslationKeyLocaleUnsetPostValidateBeforeCall(translationKey, locale, null, null);
        Type localVarReturnType = new TypeToken<ExtraInfo>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Server heartbeat operation (asynchronously)
     * 
     * @param translationKey  (required)
     * @param locale  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call adminTranslationTranslationKeyLocaleUnsetPostAsync(String translationKey, String locale, final ApiCallback<ExtraInfo> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = adminTranslationTranslationKeyLocaleUnsetPostValidateBeforeCall(translationKey, locale, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ExtraInfo>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for adminTranslationsGet
     * @param page  (optional)
     * @param pageSize  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call adminTranslationsGetCall(Integer page, Integer pageSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/admin/translations/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page_size", pageSize));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call adminTranslationsGetValidateBeforeCall(Integer page, Integer pageSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = adminTranslationsGetCall(page, pageSize, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Retrieve all existing translation keys
     * 
     * @param page  (optional)
     * @param pageSize  (optional)
     * @return InlineResponse2002
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse2002 adminTranslationsGet(Integer page, Integer pageSize) throws ApiException {
        ApiResponse<InlineResponse2002> resp = adminTranslationsGetWithHttpInfo(page, pageSize);
        return resp.getData();
    }

    /**
     * Retrieve all existing translation keys
     * 
     * @param page  (optional)
     * @param pageSize  (optional)
     * @return ApiResponse&lt;InlineResponse2002&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse2002> adminTranslationsGetWithHttpInfo(Integer page, Integer pageSize) throws ApiException {
        com.squareup.okhttp.Call call = adminTranslationsGetValidateBeforeCall(page, pageSize, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse2002>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve all existing translation keys (asynchronously)
     * 
     * @param page  (optional)
     * @param pageSize  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call adminTranslationsGetAsync(Integer page, Integer pageSize, final ApiCallback<InlineResponse2002> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = adminTranslationsGetValidateBeforeCall(page, pageSize, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse2002>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
