/*
 * Reference Data MS
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.4.6
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.ExtraInfo;
import io.swagger.client.model.InlineResponse2001;
import io.swagger.client.model.InlineResponse2003;
import io.swagger.client.model.RefEntry;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ServiceApi {
    private ApiClient apiClient;

    public ServiceApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ServiceApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for serviceRefGroupRefGroupCodeRefEntriesGet
     *
     * @param refGroupCode            (required)
     * @param filter                  (optional)
     * @param page                    (optional)
     * @param pageSize                (optional)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call serviceRefGroupRefGroupCodeRefEntriesGetCall(String refGroupCode, String filter, Integer page, Integer pageSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/service/ref-group/{ref_group_code}/ref_entries/"
                .replaceAll("\\{" + "ref_group_code" + "\\}", apiClient.escapeString(refGroupCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (filter != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));
        if (page != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (pageSize != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("page_size", pageSize));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[]{};
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call serviceRefGroupRefGroupCodeRefEntriesGetValidateBeforeCall(String refGroupCode, String filter, Integer page, Integer pageSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'refGroupCode' is set
        if (refGroupCode == null) {
            throw new ApiException("Missing the required parameter 'refGroupCode' when calling serviceRefGroupRefGroupCodeRefEntriesGet(Async)");
        }

        com.squareup.okhttp.Call call = serviceRefGroupRefGroupCodeRefEntriesGetCall(refGroupCode, filter, page, pageSize, progressListener, progressRequestListener);
        return call;


    }

    /**
     * Retrieve a set of Ref Entries under a Ref Group
     *
     * @param refGroupCode (required)
     * @param filter       (optional)
     * @param page         (optional)
     * @param pageSize     (optional)
     * @return InlineResponse2001
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse2001 serviceRefGroupRefGroupCodeRefEntriesGet(String refGroupCode, String filter, Integer page, Integer pageSize) throws ApiException {
        ApiResponse<InlineResponse2001> resp = serviceRefGroupRefGroupCodeRefEntriesGetWithHttpInfo(refGroupCode, filter, page, pageSize);
        return resp.getData();
    }

    /**
     * Retrieve a set of Ref Entries under a Ref Group
     *
     * @param refGroupCode (required)
     * @param filter       (optional)
     * @param page         (optional)
     * @param pageSize     (optional)
     * @return ApiResponse&lt;InlineResponse2001&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse2001> serviceRefGroupRefGroupCodeRefEntriesGetWithHttpInfo(String refGroupCode, String filter, Integer page, Integer pageSize) throws ApiException {
        com.squareup.okhttp.Call call = serviceRefGroupRefGroupCodeRefEntriesGetValidateBeforeCall(refGroupCode, filter, page, pageSize, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse2001>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve a set of Ref Entries under a Ref Group  (asynchronously)
     *
     * @param refGroupCode (required)
     * @param filter       (optional)
     * @param page         (optional)
     * @param pageSize     (optional)
     * @param callback     The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call serviceRefGroupRefGroupCodeRefEntriesGetAsync(String refGroupCode, String filter, Integer page, Integer pageSize, final ApiCallback<InlineResponse2001> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = serviceRefGroupRefGroupCodeRefEntriesGetValidateBeforeCall(refGroupCode, filter, page, pageSize, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse2001>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for serviceRefGroupRefGroupCodeRefEntryRefEntryCodeGet
     *
     * @param refGroupCode            (required)
     * @param refEntryCode            (required)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call serviceRefGroupRefGroupCodeRefEntryRefEntryCodeGetCall(String refGroupCode, String refEntryCode, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/service/ref-group/{ref_group_code}/ref-entry/{ref_entry_code}"
                .replaceAll("\\{" + "ref_group_code" + "\\}", apiClient.escapeString(refGroupCode.toString()))
                .replaceAll("\\{" + "ref_entry_code" + "\\}", apiClient.escapeString(refEntryCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[]{};
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call serviceRefGroupRefGroupCodeRefEntryRefEntryCodeGetValidateBeforeCall(String refGroupCode, String refEntryCode, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'refGroupCode' is set
        if (refGroupCode == null) {
            throw new ApiException("Missing the required parameter 'refGroupCode' when calling serviceRefGroupRefGroupCodeRefEntryRefEntryCodeGet(Async)");
        }
        // verify the required parameter 'refEntryCode' is set
        if (refEntryCode == null) {
            throw new ApiException("Missing the required parameter 'refEntryCode' when calling serviceRefGroupRefGroupCodeRefEntryRefEntryCodeGet(Async)");
        }

        com.squareup.okhttp.Call call = serviceRefGroupRefGroupCodeRefEntryRefEntryCodeGetCall(refGroupCode, refEntryCode, progressListener, progressRequestListener);
        return call;


    }

    /**
     * Retrieve one item from a Ref Group using its code
     *
     * @param refGroupCode (required)
     * @param refEntryCode (required)
     * @return RefEntry
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RefEntry serviceRefGroupRefGroupCodeRefEntryRefEntryCodeGet(String refGroupCode, String refEntryCode) throws ApiException {
        ApiResponse<RefEntry> resp = serviceRefGroupRefGroupCodeRefEntryRefEntryCodeGetWithHttpInfo(refGroupCode, refEntryCode);
        return resp.getData();
    }

    /**
     * Retrieve one item from a Ref Group using its code
     *
     * @param refGroupCode (required)
     * @param refEntryCode (required)
     * @return ApiResponse&lt;RefEntry&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RefEntry> serviceRefGroupRefGroupCodeRefEntryRefEntryCodeGetWithHttpInfo(String refGroupCode, String refEntryCode) throws ApiException {
        com.squareup.okhttp.Call call = serviceRefGroupRefGroupCodeRefEntryRefEntryCodeGetValidateBeforeCall(refGroupCode, refEntryCode, null, null);
        Type localVarReturnType = new TypeToken<RefEntry>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve one item from a Ref Group using its code  (asynchronously)
     *
     * @param refGroupCode (required)
     * @param refEntryCode (required)
     * @param callback     The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call serviceRefGroupRefGroupCodeRefEntryRefEntryCodeGetAsync(String refGroupCode, String refEntryCode, final ApiCallback<RefEntry> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = serviceRefGroupRefGroupCodeRefEntryRefEntryCodeGetValidateBeforeCall(refGroupCode, refEntryCode, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RefEntry>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for serviceRefGroupsFastBanksRefEntriesGet
     *
     * @param filter                  (optional)
     * @param page                    (optional)
     * @param pageSize                (optional)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call serviceRefGroupsFastBanksRefEntriesGetCall(String filter, Integer page, Integer pageSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/service/ref-groups/fast-banks/ref-entries/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (filter != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));
        if (page != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (pageSize != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("page_size", pageSize));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[]{};
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call serviceRefGroupsFastBanksRefEntriesGetValidateBeforeCall(String filter, Integer page, Integer pageSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        com.squareup.okhttp.Call call = serviceRefGroupsFastBanksRefEntriesGetCall(filter, page, pageSize, progressListener, progressRequestListener);
        return call;


    }

    /**
     * Retrieve a set of Ref Entries under a Ref Group &#x60;Fast Bank&#x60;
     *
     * @param filter   (optional)
     * @param page     (optional)
     * @param pageSize (optional)
     * @return InlineResponse2003
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse2003 serviceRefGroupsFastBanksRefEntriesGet(String filter, Integer page, Integer pageSize) throws ApiException {
        ApiResponse<InlineResponse2003> resp = serviceRefGroupsFastBanksRefEntriesGetWithHttpInfo(filter, page, pageSize);
        return resp.getData();
    }

    /**
     * Retrieve a set of Ref Entries under a Ref Group &#x60;Fast Bank&#x60;
     *
     * @param filter   (optional)
     * @param page     (optional)
     * @param pageSize (optional)
     * @return ApiResponse&lt;InlineResponse2003&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse2003> serviceRefGroupsFastBanksRefEntriesGetWithHttpInfo(String filter, Integer page, Integer pageSize) throws ApiException {
        com.squareup.okhttp.Call call = serviceRefGroupsFastBanksRefEntriesGetValidateBeforeCall(filter, page, pageSize, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse2003>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve a set of Ref Entries under a Ref Group &#x60;Fast Bank&#x60;  (asynchronously)
     *
     * @param filter   (optional)
     * @param page     (optional)
     * @param pageSize (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call serviceRefGroupsFastBanksRefEntriesGetAsync(String filter, Integer page, Integer pageSize, final ApiCallback<InlineResponse2003> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = serviceRefGroupsFastBanksRefEntriesGetValidateBeforeCall(filter, page, pageSize, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse2003>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
